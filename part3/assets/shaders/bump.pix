varying vec2 uvs;
uniform sampler2D myTexture;
uniform sampler2D normalTexture;

in vec3 cameraPosition;
in vec3 cameraNormal;
in mat4 viewMatrix;


/*********/
/* LIGHT */
/*********/
vec3 light_position_world  = vec3 (0.0, 0.0, 2.0);
vec3 Ls = vec3 (1.0, 1.0, 1.0); // white specular colour
vec3 Ld = vec3 (0.7, 0.7, 0.7); // dull white diffuse light colour
vec3 La = vec3 (0.2, 0.2, 0.2); // grey ambient colour

/**********************/
/* SURFACE PROPERTIES */
/**********************/
vec3 Ks = vec3 (1.0, 1.0, 1.0); // fully reflect specular light
vec3 Kd = texture(myTexture, uvs).rgb; // texture diffuse surface reflectance
vec3 Ka = texture(myTexture, uvs).rgb; // fully reflect ambient light
float specular_exponent = 10000.0; // specular 'power'

void main()
{
  vec3 normal = normalize(texture(normalTexture, uvs).rgb * 2.0 - 1.0);

  vec3 Ia = La * Ka;
  // raise light position to eye space
  vec3 light_position_eye = vec3 (viewMatrix * vec4 (light_position_world, 1.0));
  vec3 distance_to_light_eye = light_position_eye - cameraPosition;
  vec3 direction_to_light_eye = normalize(distance_to_light_eye);
  float dot_prod = dot(direction_to_light_eye, cameraNormal);
  dot_prod = max (dot_prod, 0.0);
  vec3 Id = Ld * Kd * dot_prod * max(dot(normal, light_position_world), 0.0); // final diffuse intensity

  /* specular strange effect */
  /* vec3 reflection_eye = reflect (-direction_to_light_eye, cameraNormal); */
  /* vec3 surface_to_viewer_eye = normalize(-cameraPosition); */
  /* float dot_prod_specular = dot (reflection_eye, surface_to_viewer_eye); */
  /* dot_prod_specular = max (dot_prod_specular, 0.0); */
  /* float specular_factor = pow (dot_prod_specular, specular_exponent); */
  /* vec3 Is = Ls * Ks * specular_factor; // final specular intensity */
  vec3 Is = vec3(0.0);

  gl_FragColor = vec4(Is + Id + Ia, 1.0);
}
